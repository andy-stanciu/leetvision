package org.leetvision.parser.meta.mapper;

import java.util.HashMap;
import java.util.Map;

import static org.leetvision.parser.meta.MetaLanguage.MetaNode;

public final class CSharpLanguageMapper extends LanguageMapper {
    public static final CSharpLanguageMapper INSTANCE = new CSharpLanguageMapper(new HashMap<>() {{
        put("compilation_unit", MetaNode.PROGRAM);
        put("namespace_or_type_name", MetaNode.TYPE);
        put("type_", MetaNode.TYPE);
        put("base_type", MetaNode.TYPE);
        put("tuple_type", MetaNode.TYPE);
        put("tuple_element", MetaNode.TYPE);
        put("simple_type", MetaNode.TYPE);
        put("numeric_type", MetaNode.TYPE_INT);
        put("integral_type", MetaNode.TYPE_BYTE);
        put("floating_point_type", MetaNode.TYPE_FLOAT);
        put("class_type", MetaNode.CLASS_OR_INTERFACE_TYPE);
        put("type_argument_list", MetaNode.TYPE_ARGUMENTS);
        put("argument_list", MetaNode.ARGUMENTS);
        put("argument", MetaNode.TYPE_PARAMETER);
        put("expression", MetaNode.EXPRESSION);
        put("non_assignment_expression", MetaNode.EXPRESSION);
        put("assignment", MetaNode.EXPRESSION);
        put("assignment_operator", MetaNode.OP_ASSIGN);
        put("conditional_expression", MetaNode.EXPRESSION);
        put("null_coalescing_expression", MetaNode.EXPRESSION);
        put("conditional_or_expression", MetaNode.EXPRESSION);
        put("conditional_and_expression", MetaNode.EXPRESSION);
        put("inclusive_or_expression", MetaNode.EXPRESSION);
        put("exclusive_or_expression", MetaNode.EXPRESSION);
        put("and_expression", MetaNode.EXPRESSION);
        put("equality_expression", MetaNode.EXPRESSION);
        put("relational_expression", MetaNode.EXPRESSION);
        put("shift_expression", MetaNode.EXPRESSION);
        put("additive_expression", MetaNode.EXPRESSION);
        put("multiplicative_expression", MetaNode.EXPRESSION);
        put("switch_expression", MetaNode.EXPRESSION);
        put("switch_expression_arms", MetaNode.SWITCH_BLOCK_STATEMENT_GROUP);
        put("switch_expression_arm", MetaNode.SWITCH_EXPRESSION);
        put("range_expression", MetaNode.EXPRESSION);
        put("unary_expression", MetaNode.EXPRESSION);
        put("cast_expression", MetaNode.CAST);
        put("primary_expression", MetaNode.EXPRESSION);
        put("primary_expression_start", MetaNode.EXPRESSION);
        put("throwable_expression", MetaNode.EXPRESSION);
        put("throw_expression", MetaNode.STATEMENT);
        put("member_access", MetaNode.METHOD_CALL);
        put("bracket_expression", MetaNode.EXPRESSION);
        put("indexer_argument", MetaNode.EXPRESSION);
        put("predefined_type", MetaNode.TYPE);
        put("expression_list", MetaNode.EXPRESSION_LIST);
        put("object_or_collection_initializer", MetaNode.INITIALIZER);
        put("object_initializer", MetaNode.INITIALIZER);
        put("member_initializer_list", MetaNode.INITIALIZER_LIST);
        put("member_initializer", MetaNode.LOCAL_VARIABLE_DECLARATION);
        put("initializer_value", MetaNode.EXPRESSION);
        put("collection_initializer", MetaNode.INITIALIZER);
        put("element_initializer", MetaNode.EXPRESSION_LIST);
        put("anonymous_object_initializer", MetaNode.INITIALIZER);
        put("member_declarator_list", MetaNode.VARIABLE_DECLARATORS);
        put("member_declarator", MetaNode.VARIABLE_DECLARATOR);
        put("unbound_type_name", MetaNode.TYPE);
        put("generic_dimension_specifier", VOID_MAPPING);
        put("isType", MetaNode.CLASS_OR_INTERFACE_TYPE);
        put("isTypePatternArms", VOID_MAPPING);
        put("isTypePatternArm", VOID_MAPPING);
        put("lambda_expression", MetaNode.LAMBDA_EXPRESSION);
        put("anonymous_function_signature", MetaNode.LAMBDA_PARAMETERS);
        put("explicit_anonymous_function_parameter_list", MetaNode.LAMBDA_PARAMETERS);
        put("explicit_anonymous_function_parameter", MetaNode.FORMAL_PARAMETER);
        put("implicit_anonymous_function_parameter_list", MetaNode.FORMAL_PARAMETERS);
        put("anonymous_function_body", MetaNode.METHOD_BODY);
        put("query_expression", VOID_MAPPING);  // no way people use this sql stuff in c#
        put("from_clause", VOID_MAPPING);
        put("query_body", VOID_MAPPING);
        put("query_body_clause", VOID_MAPPING);
        put("let_clause", VOID_MAPPING);
        put("where_clause", VOID_MAPPING);
        put("combined_join_clause", VOID_MAPPING);
        put("orderby_clause", VOID_MAPPING);
        put("ordering", VOID_MAPPING);
        put("select_or_group_clause", VOID_MAPPING);
        put("query_continuation", VOID_MAPPING);
        put("statement", MetaNode.STATEMENT);
        put("declarationStatement", MetaNode.STATEMENT);
        put("local_function_declaration", MetaNode.METHOD_DECLARATION);
        put("local_function_header", MetaNode.METHOD_DECLARATION);
        put("local_function_modifiers", MetaNode.VARIABLE_MODIFIER);
        put("local_function_body", MetaNode.BLOCK);
        put("labeled_Statement", MetaNode.STATEMENT);
        put("embedded_statement", MetaNode.BLOCK);
        put("simple_embedded_statement", MetaNode.STATEMENT);
        put("block", MetaNode.BLOCK);
        put("local_variable_declaration", MetaNode.LOCAL_VARIABLE_DECLARATION);
        put("local_variable_type", MetaNode.TYPE);
        put("local_variable_declarator", MetaNode.VARIABLE_DECLARATOR);
        put("local_variable_initializer", MetaNode.INITIALIZER);
        put("local_constant_declaration", MetaNode.CONSTANT_DECLARATOR);
        put("if_body", MetaNode.BLOCK);
        put("switch_section", MetaNode.SWITCH_BLOCK_STATEMENT_GROUP);
        put("switch_label", MetaNode.SWITCH_LABEL);
        put("case_guard", VOID_MAPPING);
        put("statement_list", MetaNode.BLOCK);
        put("for_initializer", MetaNode.FOR_CONTROL);
        put("for_iterator", MetaNode.EXPRESSION);
        put("catch_clauses", MetaNode.CATCH_CLAUSE);
        put("specific_catch_clause", MetaNode.CATCH_CLAUSE);
        put("general_catch_clause", MetaNode.CATCH_CLAUSE);
        put("exception_filter", MetaNode.EXPRESSION);
        put("finally_clause", MetaNode.FINALLY_BLOCK);
        put("resource_acquisition", VOID_MAPPING);  // namespaces: dont care
        put("namespace_declaration", VOID_MAPPING);
        put("qualified_identifier", VOID_MAPPING);
        put("namespace_body", VOID_MAPPING);
        put("extern_alias_directives", VOID_MAPPING);
        put("extern_alias_directive", VOID_MAPPING);
        put("using_directives", VOID_MAPPING);
        put("using_directive", VOID_MAPPING);
        put("namespace_member_declarations", MetaNode.DECLARATION_LIST);
        put("namespace_member_declaration", MetaNode.MEMBER_DECLARATION);
        put("type_declaration", MetaNode.MEMBER_DECLARATION);
        put("identifier", MetaNode.IDENTIFIER);
        put("qualifier_alias_member", MetaNode.FORMAL_PARAMETER);
        put("type_parameter_list", MetaNode.TYPE_ARGUMENTS);
        put("type_parameter", MetaNode.TYPE_PARAMETER);
        put("class_base", MetaNode.TYPE_LIST);
        put("interface_type_list", MetaNode.TYPE_LIST);
        put("type_parameter_constraints_clauses", VOID_MAPPING);
        put("type_parameter_constraints_clause", VOID_MAPPING);
        put("type_parameter_constraints", VOID_MAPPING);
        put("primary_constraint", VOID_MAPPING);
        put("secondary_constraints", VOID_MAPPING);
        put("constructor_constraint", VOID_MAPPING);
        put("class_body", MetaNode.CLASS_BODY);
        put("class_member_declarations", MetaNode.MEMBER_DECLARATION_LIST);
        put("class_member_declaration", MetaNode.MEMBER_DECLARATION);
        put("all_member_modifiers", MetaNode.MODIFIER_LIST);
        put("all_member_modifier", MetaNode.MODIFIER_PROTECTED);
        put("common_member_declaration", MetaNode.MEMBER_DECLARATION);
        put("typed_member_declaration", MetaNode.MEMBER_DECLARATION);
        put("constant_declarators", MetaNode.VARIABLE_DECLARATORS);
        put("constant_declarator", MetaNode.VARIABLE_DECLARATOR);
        put("variable_declarators", MetaNode.VARIABLE_DECLARATORS);
        put("variable_declarator", MetaNode.VARIABLE_DECLARATOR);
        put("variable_initializer", MetaNode.INITIALIZER);
        put("return_type", MetaNode.TYPE);
        put("member_name", MetaNode.CLASS_OR_INTERFACE_TYPE);
        put("method_body", MetaNode.METHOD_BODY);
        put("formal_parameter_list", MetaNode.FORMAL_PARAMETERS);
        put("fixed_parameters", MetaNode.FORMAL_PARAMETERS);
        put("fixed_parameter", MetaNode.FORMAL_PARAMETER);
        put("parameter_modifier", MetaNode.MODIFIER_PROTECTED);
        put("parameter_array", MetaNode.MODIFIER_VARARGS);
        put("accessor_declarations", MetaNode.OP_ASSIGN);
        put("get_accessor_declaration", VOID_MAPPING);
        put("set_accessor_declaration", VOID_MAPPING);
        put("accessor_modifier", VOID_MAPPING);
        put("accessor_body", VOID_MAPPING);
        put("event_accessor_declarations", VOID_MAPPING);
        put("add_accessor_declaration", VOID_MAPPING);
        put("remove_accessor_declaration", VOID_MAPPING);
        put("overloadable_operator", MetaNode.OP_AND);
        put("conversion_operator_declarator", VOID_MAPPING);
        put("constructor_initializer", MetaNode.INITIALIZER_LIST);
        put("body", MetaNode.CLASS_BODY);
        put("struct_interfaces", MetaNode.TYPE_LIST);
        put("struct_body", MetaNode.CLASS_BODY);
        put("struct_member_declaration", MetaNode.MEMBER_DECLARATION);
        put("array_type", MetaNode.TYPE);
        put("rank_specifier", MetaNode.ARRAY_BRACKETS);
        put("array_initializer", MetaNode.ARRAY_INITIALIZER);
        put("variant_type_parameter_list", MetaNode.TYPE_PARAMETERS);
        put("variant_type_parameter", MetaNode.TYPE_PARAMETER);
        put("variance_annotation", VOID_MAPPING);
        put("interface_base", MetaNode.CLASS_OR_INTERFACE_TYPE);
        put("interface_body", MetaNode.INTERFACE_BODY);
        put("interface_member_declaration", MetaNode.MEMBER_DECLARATION);
        put("interface_accessors", VOID_MAPPING);
        put("enum_base", MetaNode.CLASS_OR_INTERFACE_TYPE);
        put("enum_body", MetaNode.ENUM_BODY_DECLARATIONS);
        put("enum_member_declaration", MetaNode.ENUM_DECLARATION);
        put("global_attribute_section", VOID_MAPPING);
        put("global_attribute_target", VOID_MAPPING);
        put("attributes", VOID_MAPPING);
        put("attribute_section", VOID_MAPPING);
        put("attribute_target", VOID_MAPPING);
        put("attribute_list", VOID_MAPPING);
        put("attribute", VOID_MAPPING);
        put("attribute_argument", VOID_MAPPING);
        put("pointer_type", MetaNode.TYPE);
        put("fixed_pointer_declarators", MetaNode.VARIABLE_DECLARATORS);
        put("fixed_pointer_declarator", MetaNode.VARIABLE_DECLARATOR);
        put("fixed_pointer_initializer", MetaNode.INITIALIZER);
        put("fixed_size_buffer_declarator", MetaNode.INITIALIZER);
        put("stackalloc_initializer", MetaNode.INITIALIZER);
        put("right_arrow", MetaNode.OP_LAMBDA);
        put("right_shift", MetaNode.OP_RSHIFT);
        put("right_shift_assignment", MetaNode.OP_RSHIFT_ASSIGN);
        put("literal", MetaNode.STRING_LITERAL);
        put("boolean_literal", MetaNode.BOOL_LITERAL);
        put("string_literal", MetaNode.STRING_LITERAL);
        put("interpolated_regular_string", MetaNode.STRING_LITERAL);
        put("interpolated_verbatium_string", MetaNode.STRING_LITERAL);
        put("interpolated_regular_string_part", MetaNode.STRING_LITERAL);
        put("interpolated_verbatium_string_part", MetaNode.STRING_LITERAL);
        put("interpolated_string_expression", MetaNode.STRING_LITERAL);
        put("keyword", MetaNode.IDENTIFIER);
        put("class_definition", MetaNode.CLASS_DECLARATION);
        put("struct_definition", MetaNode.CLASS_DECLARATION);
        put("interface_definition", MetaNode.INTERFACE_DECLARATION);
        put("enum_definition", MetaNode.ENUM_DECLARATION);
        put("delegate_definition", MetaNode.METHOD_DECLARATION);
        put("event_declaration", MetaNode.METHOD_DECLARATION);
        put("field_declaration", MetaNode.FIELD_DECLARATION);
        put("property_declaration", MetaNode.FIELD_DECLARATION);
        put("constant_declaration", MetaNode.LOCAL_VARIABLE_DECLARATION);
        put("indexer_declaration", MetaNode.FIELD_DECLARATION);
        put("destructor_definition", MetaNode.DESTRUCTOR);
        put("constructor_declaration", MetaNode.CONSTRUCTOR_DECLARATION);
        put("method_declaration", MetaNode.METHOD_DECLARATION);
        put("method_member_name", MetaNode.OP_METHOD_REFERENCE);
        put("operator_declaration", MetaNode.METHOD_DECLARATION);
        put("arg_declaration", MetaNode.FORMAL_PARAMETER);
        put("method_invocation", MetaNode.METHOD_CALL);
        put("object_creation_expression", MetaNode.CREATOR);

        put("null", MetaNode.NULL_LITERAL);
        put("BYTE_ORDER_MARK", VOID_MAPPING);
        put("SINGLE_LINE_DOC_COMMENT", VOID_MAPPING);
        put("EMPTY_DELIMITED_DOC_COMMENT",VOID_MAPPING);
        put("DELIMITED_DOC_COMMENT", VOID_MAPPING);
        put("SINGLE_LINE_COMMENT", VOID_MAPPING);
        put("DELIMITED_COMMENT", VOID_MAPPING);
        put("WHITESPACES", VOID_MAPPING);
        put("SHARP", VOID_MAPPING);
        put("ABSTRACT", MetaNode.MODIFIER_ABSTRACT);
        put("ADD", VOID_MAPPING);
        put("ALIAS", MetaNode.TYPEDEF);
        put("ARGLIST", VOID_MAPPING);
        put("AS", MetaNode.CAST);
        put("ASCENDING", VOID_MAPPING);
        put("ASYNC", VOID_MAPPING);
        put("AWAIT", VOID_MAPPING);
        put("BASE", VOID_MAPPING);
        put("BOOL", MetaNode.TYPE_BOOLEAN);
        put("BREAK", MetaNode.STATEMENT_BREAK);
        put("BY", VOID_MAPPING);
        put("BYTE", MetaNode.TYPE_BYTE);
        put("CASE", MetaNode.STATEMENT_CASE);
        put("CATCH", MetaNode.STATEMENT_CATCH);
        put("CHAR", MetaNode.TYPE_CHAR);
        put("CHECKED", VOID_MAPPING);
        put("CLASS", MetaNode.TYPE_CLASS);
        put("CONST", MetaNode.MODIFIER_CONST);
        put("CONTINUE", MetaNode.STATEMENT_CONTINUE);
        put("DECIMAL", VOID_MAPPING);
        put("DEFAULT", MetaNode.STATEMENT_DEFAULT);
        put("DELEGATE", VOID_MAPPING);
        put("DESCENDING", VOID_MAPPING);
        put("DO", MetaNode.STATEMENT_DO);
        put("DOUBLE", MetaNode.TYPE_DOUBLE);
        put("DYNAMIC", VOID_MAPPING);
        put("ELSE", MetaNode.STATEMENT_ELSE);
        put("ENUM", MetaNode.TYPE_ENUM);
        put("EQUALS", MetaNode.OP_EQUAL);
        put("EVENT", VOID_MAPPING);
        put("EXPLICIT", VOID_MAPPING);
        put("EXTERN", VOID_MAPPING);
        put("FALSE", MetaNode.BOOL_LITERAL);
        put("FINALLY", MetaNode.STATEMENT_FINALLY);
        put("FIXED", VOID_MAPPING);
        put("FLOAT", MetaNode.TYPE_FLOAT);
        put("FOR", MetaNode.STATEMENT_FOR);
        put("FOREACH", MetaNode.STATEMENT_FOR);
        put("FROM", VOID_MAPPING);
        put("GET", VOID_MAPPING);
        put("GOTO", MetaNode.STATEMENT_GOTO);
        put("GROUP", VOID_MAPPING);
        put("IF", MetaNode.STATEMENT_IF);
        put("IMPLICIT", VOID_MAPPING);
        put("IN", VOID_MAPPING);
        put("INT", MetaNode.TYPE_INT);
        put("INTERFACE", MetaNode.TYPE_INTERFACE);
        put("INTERNAL", VOID_MAPPING);
        put("INTO", VOID_MAPPING);
        put("IS", MetaNode.EXPR_INSTANCEOF);
        put("JOIN", VOID_MAPPING);
        put("LET", VOID_MAPPING);
        put("LOCK", VOID_MAPPING);
        put("LONG", MetaNode.TYPE_LONG);
        put("NAMEOF", MetaNode.TYPE_OF);
        put("NAMESPACE", VOID_MAPPING);
        put("NEW", MetaNode.EXPR_NEW);
        put("NULL_", MetaNode.NULL_LITERAL);
        put("OBJECT", VOID_MAPPING);
        put("ON", VOID_MAPPING);
        put("OPERATOR", VOID_MAPPING);
        put("ORDERBY", VOID_MAPPING);
        put("OUT", VOID_MAPPING);
        put("OVERRIDE", MetaNode.MODIFIER_OVERRIDE);
        put("PARAMS", MetaNode.MODIFIER_VARARGS);
        put("PARTIAL", VOID_MAPPING);
        put("PRIVATE", MetaNode.MODIFIER_PRIVATE);
        put("PROTECTED", MetaNode.MODIFIER_PROTECTED);
        put("PUBLIC", MetaNode.MODIFIER_PUBLIC);
        put("READONLY", MetaNode.MODIFIER_FINAL);
        put("REF", VOID_MAPPING);
        put("REMOVE", VOID_MAPPING);
        put("RETURN", MetaNode.STATEMENT_RETURN);
        put("SBYTE", MetaNode.TYPE_BYTE);
        put("SEALED", MetaNode.MODIFIER_SEALED);
        put("SELECT", VOID_MAPPING);
        put("SET", VOID_MAPPING);
        put("SHORT", MetaNode.TYPE_SHORT);
        put("SIZEOF", MetaNode.OP_SIZEOF);
        put("STACKALLOC", MetaNode.EXPR_NEW);
        put("STATIC", MetaNode.MODIFIER_STATIC);
        put("STRING", MetaNode.TYPE_STRING);
        put("STRUCT", MetaNode.TYPE_STRUCT);
        put("SWITCH", MetaNode.STATEMENT_SWITCH);
        put("THIS", MetaNode.EXPR_THIS);
        put("THROW", MetaNode.STATEMENT_THROW);
        put("TRUE", MetaNode.BOOL_LITERAL);
        put("TRY", MetaNode.STATEMENT_TRY);
        put("TYPEOF", MetaNode.TYPE_OF);
        put("UINT", MetaNode.TYPE_INT);
        put("ULONG", MetaNode.TYPE_LONG);
        put("UNCHECKED", VOID_MAPPING);
        put("UNMANAGED", VOID_MAPPING);
        put("UNSAFE", VOID_MAPPING);
        put("USHORT", VOID_MAPPING);
        put("USING", VOID_MAPPING);
        put("VAR", MetaNode.TYPE_VAR);
        put("VIRTUAL", MetaNode.MODIFIER_ABSTRACT);
        put("VOID", MetaNode.TYPE_VOID);
        put("VOLATILE", VOID_MAPPING);
        put("WHEN", VOID_MAPPING);
        put("WHERE", VOID_MAPPING);
        put("WHILE", MetaNode.STATEMENT_WHILE);
        put("YIELD", MetaNode.STATEMENT_YIELD);
        put("IDENTIFIER", MetaNode.IDENTIFIER);
        put("LITERAL_ACCESS", MetaNode.DECIMAL_LITERAL);
        put("INTEGER_LITERAL", MetaNode.DECIMAL_LITERAL);
        put("HEX_INTEGER_LITERAL", MetaNode.HEX_LITERAL);
        put("BIN_INTEGER_LITERAL", MetaNode.BINARY_LITERAL);
        put("REAL_LITERAL", MetaNode.DECIMAL_LITERAL);
        put("CHARACTER_LITERAL", MetaNode.CHAR_LITERAL);
        put("REGULAR_STRING", MetaNode.STRING_LITERAL);
        put("VERBATIUM_STRING", MetaNode.MULTILINE_STRING_LITERAL);
        put("INTERPOLATED_REGULAR_STRING_START", VOID_MAPPING);
        put("INTERPOLATED_VERBATIUM_STRING_START", VOID_MAPPING);
        put("OPEN_BRACE", VOID_MAPPING);
        put("CLOSE_BRACE", VOID_MAPPING);
        put("OPEN_BRACKET", MetaNode.L_SQUARE);
        put("CLOSE_BRACKET", MetaNode.R_SQUARE);
        put("OPEN_PARENS", VOID_MAPPING);
        put("CLOSE_PARENS", VOID_MAPPING);
        put("DOT", MetaNode.DOT);
        put("COMMA", VOID_MAPPING);
        put("COLON", VOID_MAPPING);
        put("SEMICOLON", VOID_MAPPING);
        put("PLUS", MetaNode.OP_ADD);
        put("MINUS", MetaNode.OP_SUB);
        put("STAR", MetaNode.OP_MUL);
        put("DIV", MetaNode.OP_DIV);
        put("PERCENT", MetaNode.OP_MOD);
        put("AMP", MetaNode.OP_BITAND);
        put("BITWISE_OR", MetaNode.OP_BITOR);
        put("CARET", MetaNode.OP_XOR);
        put("BANG", MetaNode.OP_NOT);
        put("TILDE", MetaNode.OP_BITNOT);
        put("ASSIGNMENT", MetaNode.OP_ASSIGN);
        put("LT", MetaNode.OP_LT);
        put("GT", MetaNode.OP_GT);
        put("INTERR", MetaNode.OP_TERNARY);
        put("DOUBLE_COLON", MetaNode.OP_METHOD_REFERENCE);
        put("OP_COALESCING", VOID_MAPPING);
        put("OP_INC", MetaNode.OP_INC);
        put("OP_DEC", MetaNode.OP_DEC);
        put("OP_AND", MetaNode.OP_AND);
        put("OP_OR", MetaNode.OP_OR);
        put("OP_PTR", MetaNode.OP_DEREF_ACCESS);
        put("OP_EQ", MetaNode.OP_EQUAL);
        put("OP_NE", MetaNode.OP_NOTEQUAL);
        put("OP_LE", MetaNode.OP_LE);
        put("OP_GE", MetaNode.OP_GE);
        put("OP_ADD_ASSIGNMENT", MetaNode.OP_ADD_ASSIGN);
        put("OP_SUB_ASSIGNMENT", MetaNode.OP_SUB_ASSIGN);
        put("OP_MULT_ASSIGNMENT", MetaNode.OP_MUL_ASSIGN);
        put("OP_DIV_ASSIGNMENT", MetaNode.OP_DIV_ASSIGN);
        put("OP_MOD_ASSIGNMENT", MetaNode.OP_MOD_ASSIGN);
        put("OP_AND_ASSIGNMENT", MetaNode.OP_AND_ASSIGN);
        put("OP_OR_ASSIGNMENT", MetaNode.OP_OR_ASSIGN);
        put("OP_XOR_ASSIGNMENT", MetaNode.OP_XOR_ASSIGN);
        put("OP_LEFT_SHIFT", MetaNode.OP_LSHIFT);
        put("OP_LEFT_SHIFT_ASSIGNMENT", MetaNode.OP_LSHIFT_ASSIGN);
        put("OP_COALESCING_ASSIGNMENT", MetaNode.OP_ASSIGN);
        put("OP_RANGE", VOID_MAPPING);
        put("DOUBLE_CURLY_INSIDE", VOID_MAPPING);
        put("OPEN_BRACE_INSIDE", VOID_MAPPING);
        put("REGULAR_CHAR_INSIDE", VOID_MAPPING);
        put("TEXT", VOID_MAPPING);
        put("DOUBLE_CURLY_CLOSE_INSIDE", VOID_MAPPING);
        put("REGULAR_STRING_INSIDE", VOID_MAPPING);
        put("DOUBLE_QUOTE_INSIDE", VOID_MAPPING);
        put("FORMAT_STRING", VOID_MAPPING);
        put("EOF", VOID_MAPPING);
    }});

    private CSharpLanguageMapper(final Map<String, MetaNode> mappings) {
        super(mappings);
    }
}
