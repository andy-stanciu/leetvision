package org.leetvision.parser.meta.mapper;

import static org.leetvision.parser.meta.MetaLanguage.MetaNode;

import java.util.HashMap;
import java.util.Map;

public final class TypeScriptLanguageMapper extends LanguageMapper {
    public static TypeScriptLanguageMapper INSTANCE = new TypeScriptLanguageMapper(new HashMap<>() {{
        put("initializer", MetaNode.INITIALIZER);
        put("bindingPattern", MetaNode.DECIMAL_LITERAL);
        put("typeParameters", MetaNode.TYPE_PARAMETERS);
        put("typeParameterList", MetaNode.TYPE_PARAMETERS);
        put("typeParameter", MetaNode.TYPE_PARAMETER);
        put("constraint", MetaNode.CLASS_MODIFIER);
        put("typeArguments", MetaNode.TYPE_ARGUMENTS);
        put("typeArgumentList", MetaNode.TYPE_ARGUMENTS);
        put("typeArgument", MetaNode.TYPE);
        put("type_", MetaNode.TYPE);
        put("unionOrIntersectionOrPrimaryType", MetaNode.TYPE);
        put("primaryType", MetaNode.TYPE);
        put("predefinedType", MetaNode.TYPE);
        put("typeReference", MetaNode.TYPE);
        put("typeGeneric", MetaNode.TYPE);
        put("typeName", MetaNode.TYPE);
        put("objectType", MetaNode.EXPRESSION);
        put("typeBody", MetaNode.EXPRESSION);
        put("typeMemberList", MetaNode.EXPRESSION_LIST);
        put("typeMember", MetaNode.EXPRESSION);
        put("tupleElementTypes", MetaNode.TYPE_LIST);
        put("functionType", MetaNode.METHOD_DECLARATION);
        put("constructorType", MetaNode.CONSTRUCTOR_DECLARATION);
        put("typeQuery", MetaNode.EXPRESSION);
        put("typeQueryExpression", MetaNode.EXPRESSION);
        put("propertySignatur", MetaNode.FIELD_DECLARATION);
        put("typeAnnotation", MetaNode.TYPE);
        put("callSignature", MetaNode.METHOD_CALL);
        put("parameterList", MetaNode.FORMAL_PARAMETERS);
        put("requiredParameterList", MetaNode.FORMAL_PARAMETERS);
        put("parameter", MetaNode.FORMAL_PARAMETER);
        put("optionalParameter", MetaNode.FORMAL_PARAMETER);
        put("restParameter", MetaNode.FORMAL_PARAMETER);
        put("requiredParameter", MetaNode.FORMAL_PARAMETER);
        put("accessibilityModifier", MetaNode.MODIFIER_PUBLIC);
        put("identifierOrPattern", MetaNode.IDENTIFIER);
        put("constructSignature", MetaNode.EXPRESSION);
        put("indexSignature", MetaNode.EXPRESSION);
        put("methodSignature", MetaNode.EXPRESSION);
        put("typeAliasDeclaration", MetaNode.TYPE);
        put("constructorDeclaration", MetaNode.CONSTRUCTOR_DECLARATION);
        put("interfaceDeclaration", MetaNode.INTERFACE_DECLARATION);
        put("interfaceExtendsClause", MetaNode.CLASS_MODIFIER);
        put("classOrInterfaceTypeList", MetaNode.TYPE_LIST);
        put("enumDeclaration", MetaNode.ENUM_DECLARATION);
        put("enumBody", MetaNode.ENUM_BODY_DECLARATIONS);
        put("enumMemberList", MetaNode.ENUM_BODY_DECLARATIONS);
        put("enumMember", MetaNode.ENUM_CONSTANT);
        put("namespaceDeclaration", MetaNode.MEMBER_DECLARATION_LIST);
        put("namespaceName", VOID_MAPPING);
        put("decoratorList", VOID_MAPPING);
        put("decorator", VOID_MAPPING);
        put("decoratorMemberExpression", VOID_MAPPING);
        put("decoratorCallExpression", VOID_MAPPING);
        put("program", MetaNode.PROGRAM);
        put("sourceElement", MetaNode.STATEMENT);
        put("statement", MetaNode.STATEMENT);
        put("block", MetaNode.BLOCK);
        put("statementList", MetaNode.BLOCK);
        put("abstractDeclaration", MetaNode.MEMBER_DECLARATION);
        put("importStatement", VOID_MAPPING);
        put("importFromBlock", VOID_MAPPING);
        put("importModuleItems", VOID_MAPPING);
        put("importAliasName", VOID_MAPPING);
        put("moduleExportName", VOID_MAPPING);
        put("importedBinding", VOID_MAPPING);
        put("importDefault", VOID_MAPPING);
        put("importNamespace", VOID_MAPPING);
        put("importFrom", VOID_MAPPING);
        put("aliasName", VOID_MAPPING);
        put("exportStatement", MetaNode.STATEMENT);
        put("exportFromBlock", VOID_MAPPING);
        put("exportModuleItems", VOID_MAPPING);
        put("exportAliasName", VOID_MAPPING);
        put("declaration", MetaNode.VARIABLE_DECLARATORS); // hack
        put("variableStatement", MetaNode.VARIABLE_DECLARATORS);
        put("variableDeclarationList", MetaNode.VARIABLE_DECLARATORS);
        put("variableDeclaration", MetaNode.VARIABLE_DECLARATOR);
        put("emptyStatement_", VOID_MAPPING);
        put("expressionStatement", MetaNode.STATEMENT);
        put("ifStatement", MetaNode.STATEMENT);
        put("iterationStatement", MetaNode.STATEMENT);
        put("varModifier", MetaNode.VARIABLE_MODIFIER);
        put("continueStatement", MetaNode.STATEMENT);
        put("breakStatement", MetaNode.STATEMENT);
        put("returnStatement", MetaNode.STATEMENT);
        put("yieldStatement", MetaNode.STATEMENT);
        put("withStatement", MetaNode.STATEMENT);
        put("switchStatement", MetaNode.STATEMENT);
        put("caseBlock", MetaNode.SWITCH_BLOCK_STATEMENT_GROUP);
        put("caseClauses", MetaNode.BLOCK);
        put("caseClause", MetaNode.SWITCH_LABEL);
        put("defaultClause", MetaNode.SWITCH_LABEL);
        put("labelledStatement", MetaNode.STATEMENT);
        put("throwStatement", MetaNode.STATEMENT);
        put("tryStatement", MetaNode.STATEMENT);
        put("catchProduction", MetaNode.CATCH_CLAUSE);
        put("finallyProduction", MetaNode.FINALLY_BLOCK);
        put("debuggerStatement", VOID_MAPPING);
        put("functionDeclaration", MetaNode.METHOD_DECLARATION);
        put("classDeclaration", MetaNode.CLASS_DECLARATION);
        put("classHeritage", MetaNode.CLASS_MODIFIER);
        put("classTail", MetaNode.CLASS_DECLARATION);
        put("classExtendsClause", MetaNode.CLASS_MODIFIER);
        put("implementsClause", MetaNode.CLASS_MODIFIER);
        put("classElement", MetaNode.MEMBER_DECLARATION);
        put("propertyMemberDeclaration", MetaNode.MEMBER_DECLARATION);
        put("propertyMemberBase", MetaNode.VARIABLE_MODIFIER);
        put("indexMemberDeclaration", MetaNode.MEMBER_DECLARATION);
        put("generatorMethod", MetaNode.METHOD_DECLARATION);
        put("generatorFunctionDeclaration", MetaNode.METHOD_DECLARATION);
        put("generatorBlock", MetaNode.METHOD_BODY);
        put("generatorDefinition", MetaNode.MEMBER_DECLARATION);
        put("iteratorBlock", MetaNode.MEMBER_DECLARATION_LIST);
        put("iteratorDefinition", MetaNode.MEMBER_DECLARATION);
        put("classElementName", MetaNode.IDENTIFIER);
        put("privateIdentifier", MetaNode.IDENTIFIER);
        put("formalParameterList", MetaNode.FORMAL_PARAMETERS);
        put("formalParameterArg", MetaNode.FORMAL_PARAMETER);
        put("lastFormalParameterArg", MetaNode.FORMAL_PARAMETER);
        put("functionBody", MetaNode.METHOD_BODY);
        put("sourceElements", MetaNode.BLOCK);
        put("arrayLiteral", MetaNode.ARRAY_CREATOR_REST);
        put("elementList", MetaNode.ARRAY_CREATOR_REST);
        put("arrayElement", MetaNode.EXPRESSION);
        put("objectLiteral", MetaNode.CREATOR);
        put("propertyAssignment", MetaNode.VARIABLE_DECLARATOR);
        put("getAccessor", MetaNode.METHOD_DECLARATION);
        put("setAccessor", MetaNode.METHOD_DECLARATION);
        put("propertyName", MetaNode.IDENTIFIER);
        put("arguments", MetaNode.ARGUMENTS);
        put("argumentList", MetaNode.ARGUMENTS);
        put("argument", MetaNode.EXPRESSION);
        put("expressionSequence", MetaNode.EXPRESSION_LIST);
        put("singleExpression", MetaNode.EXPRESSION);
        put("asExpression", MetaNode.EXPRESSION);
        put("assignable", MetaNode.EXPRESSION);
        put("anonymousFunction", MetaNode.LAMBDA_EXPRESSION);
        put("arrowFunctionDeclaration", MetaNode.EXPRESSION);
        put("arrowFunctionParameters", MetaNode.LAMBDA_PARAMETERS);
        put("arrowFunctionBody", MetaNode.METHOD_BODY);
        put("assignmentOperator", MetaNode.OP_ASSIGN);
        put("literal", MetaNode.BINARY_LITERAL);
        put("templateStringLiteral", MetaNode.STRING_LITERAL);
        put("templateStringAtom", MetaNode.STRING_LITERAL);
        put("numericLiteral", MetaNode.DECIMAL_LITERAL);
        put("bigintLiteral", MetaNode.DECIMAL_LITERAL);
        put("getter", VOID_MAPPING);
        put("setter", VOID_MAPPING);
        put("identifierName", MetaNode.IDENTIFIER);
        put("identifier", MetaNode.IDENTIFIER);
        put("identifierOrKeyWord", MetaNode.IDENTIFIER);
        put("reservedWord", MetaNode.DECIMAL_LITERAL);
        put("keyword", MetaNode.STATEMENT_WHILE);
        put("eos", VOID_MAPPING);

        put("null", MetaNode.NULL_LITERAL);
        put("MultiLineComment", VOID_MAPPING);
        put("SingleLineComment", VOID_MAPPING);
        put("RegularExpressionLiteral", MetaNode.STRING_LITERAL);
        put("OpenBracket", MetaNode.L_SQUARE);
        put("CloseBracket", MetaNode.R_SQUARE);
        put("OpenParen", VOID_MAPPING);
        put("CloseParen", VOID_MAPPING);
        put("OpenBrace", VOID_MAPPING);
        put("TemplateCloseBrace", VOID_MAPPING);
        put("CloseBrace", VOID_MAPPING);
        put("SemiColon", VOID_MAPPING);
        put("Comma", VOID_MAPPING);
        put("Assign", MetaNode.OP_ASSIGN);
        put("QuestionMark", MetaNode.OP_TERNARY);
        put("QuestionMarkDot", MetaNode.DOT);
        put("Colon", VOID_MAPPING);
        put("Ellipsis", MetaNode.MODIFIER_VARARGS);
        put("Dot", MetaNode.DOT);
        put("PlusPlus", MetaNode.OP_INC);
        put("MinusMinus", MetaNode.OP_DEC);
        put("Plus", MetaNode.OP_ADD);
        put("Minus", MetaNode.OP_SUB);
        put("BitNot", MetaNode.OP_BITNOT);
        put("Not", MetaNode.OP_NOT);
        put("Multiply", MetaNode.OP_MUL);
        put("Divide", MetaNode.OP_DIV);
        put("Modulus", MetaNode.OP_MOD);
        put("Power", MetaNode.OP_POWER);
        put("NullCoalesce", VOID_MAPPING);
        put("Hashtag", VOID_MAPPING);
        put("RightShiftArithmetic", MetaNode.OP_RSHIFT);
        put("LeftShiftArithmetic", MetaNode.OP_LSHIFT);
        put("RightShiftLogical", MetaNode.OP_RSHIFT);
        put("LessThan", MetaNode.OP_LT);
        put("MoreThan", MetaNode.OP_GT);
        put("LessThanEquals", MetaNode.OP_LE);
        put("GreaterThanEquals", MetaNode.OP_GE);
        put("Equals_", MetaNode.OP_EQUAL);
        put("NotEquals", MetaNode.OP_NOTEQUAL);
        put("IdentityEquals", MetaNode.OP_EQUAL);
        put("IdentityNotEquals", MetaNode.OP_NOTEQUAL);
        put("BitAnd", MetaNode.OP_BITAND);
        put("BitXOr", MetaNode.OP_XOR);
        put("BitOr", MetaNode.OP_BITOR);
        put("And", MetaNode.OP_AND);
        put("Or", MetaNode.OP_OR);
        put("MultiplyAssign", MetaNode.OP_MUL_ASSIGN);
        put("DivideAssign", MetaNode.OP_DIV_ASSIGN);
        put("ModulusAssign", MetaNode.OP_MOD_ASSIGN);
        put("PlusAssign", MetaNode.OP_ADD_ASSIGN);
        put("MinusAssign", MetaNode.OP_SUB_ASSIGN);
        put("LeftShiftArithmeticAssign", MetaNode.OP_LSHIFT_ASSIGN);
        put("RightShiftArithmeticAssign", MetaNode.OP_RSHIFT_ASSIGN);
        put("RightShiftLogicalAssign", MetaNode.OP_URSHIFT_ASSIGN);
        put("BitAndAssign", MetaNode.OP_AND_ASSIGN);
        put("BitXorAssign", MetaNode.OP_XOR_ASSIGN);
        put("BitOrAssign", MetaNode.OP_OR_ASSIGN);
        put("PowerAssign", MetaNode.OP_MUL_ASSIGN);
        put("NullishCoalescingAssign", VOID_MAPPING);
        put("ARROW", MetaNode.OP_LAMBDA);
        put("NullLiteral", MetaNode.NULL_LITERAL);
        put("BooleanLiteral", MetaNode.BOOL_LITERAL);
        put("DecimalLiteral", MetaNode.DECIMAL_LITERAL);
        put("HexIntegerLiteral", MetaNode.HEX_LITERAL);
        put("OctalIntegerLiteral", MetaNode.OCT_LITERAL);
        put("OctalIntegerLiteral2", MetaNode.OCT_LITERAL);
        put("BinaryIntegerLiteral", MetaNode.BINARY_LITERAL);
        put("BigHexIntegerLiteral", MetaNode.BINARY_LITERAL);
        put("BigOctalIntegerLiteral", MetaNode.OCT_LITERAL);
        put("BigBinaryIntegerLiteral", MetaNode.BINARY_LITERAL);
        put("BigDecimalIntegerLiteral", MetaNode.DECIMAL_LITERAL);
        put("Break", MetaNode.STATEMENT_BREAK);
        put("Do", MetaNode.STATEMENT_DO);
        put("Instanceof", MetaNode.EXPR_INSTANCEOF);
        put("Typeof", MetaNode.TYPE_OF);
        put("Case", MetaNode.STATEMENT_CASE);
        put("Else", MetaNode.STATEMENT_ELSE);
        put("New", MetaNode.EXPR_NEW);
        put("Var", MetaNode.TYPE_VAR);
        put("Catch", MetaNode.STATEMENT_CATCH);
        put("Finally", MetaNode.FINALLY_BLOCK);
        put("Return", MetaNode.STATEMENT_RETURN);
        put("Void", MetaNode.TYPE_VOID);
        put("Continue", MetaNode.STATEMENT_CONTINUE);
        put("For", MetaNode.STATEMENT_FOR);
        put("Switch", MetaNode.STATEMENT_SWITCH);
        put("While", MetaNode.STATEMENT_WHILE);
        put("Debugger", VOID_MAPPING);
        put("Function_", MetaNode.METHOD_DECLARATION);
        put("This", MetaNode.EXPR_THIS);
        put("With", VOID_MAPPING);
        put("Default", MetaNode.STATEMENT_DEFAULT);
        put("If", MetaNode.STATEMENT_IF);
        put("Throw", MetaNode.STATEMENT_THROW);
        put("Delete", MetaNode.FREE);
        put("In", VOID_MAPPING);
        put("Try", MetaNode.STATEMENT_TRY);
        put("As", MetaNode.CAST);
        put("From", VOID_MAPPING);
        put("ReadOnly", MetaNode.MODIFIER_FINAL);
        put("Async", VOID_MAPPING);
        put("Await", VOID_MAPPING);
        put("Yield", MetaNode.STATEMENT_YIELD);
        put("YieldStar", MetaNode.STATEMENT_YIELD);
        put("Class", MetaNode.CLASS_DECLARATION);
        put("Enum", MetaNode.ENUM_DECLARATION);
        put("Extends", MetaNode.MODIFIER_EXTENDS);
        put("Super", MetaNode.EXPR_SUPER);
        put("Const", MetaNode.MODIFIER_CONST);
        put("Export", MetaNode.MODIFIER_PUBLIC);
        put("Import", VOID_MAPPING);
        put("Implements", MetaNode.MODIFIER_IMPLEMENTS);
        put("Let", MetaNode.MODIFIER_CONST);
        put("Private", MetaNode.MODIFIER_PRIVATE);
        put("Public", MetaNode.MODIFIER_PUBLIC);
        put("Interface", MetaNode.INTERFACE_DECLARATION);
        put("Package", VOID_MAPPING);
        put("Protected", MetaNode.MODIFIER_PROTECTED);
        put("Static", MetaNode.MODIFIER_STATIC);
        put("Any", MetaNode.TYPE_VAR);
        put("Number", MetaNode.FLOAT_LITERAL);
        put("Never", VOID_MAPPING);
        put("Boolean", MetaNode.TYPE_BOOLEAN);
        put("String", MetaNode.TYPE_STRING);
        put("Unique", VOID_MAPPING);
        put("Symbol", VOID_MAPPING);
        put("Undefined", MetaNode.NULL_LITERAL);
        put("Object", MetaNode.TYPE_CLASS);
        put("Of", MetaNode.TYPE_OF);
        put("KeyOf", MetaNode.TYPE_OF);
        put("TypeAlias", MetaNode.TYPEDEF);
        put("Constructor", MetaNode.CONSTRUCTOR_DECLARATION);
        put("Namespace", VOID_MAPPING);
        put("Require", VOID_MAPPING);
        put("Module", VOID_MAPPING);
        put("Declare", VOID_MAPPING);
        put("Abstract", MetaNode.MODIFIER_ABSTRACT);
        put("Is", MetaNode.EXPR_INSTANCEOF);
        put("At", VOID_MAPPING);
        put("Identifier", MetaNode.IDENTIFIER);
        put("StringLiteral", MetaNode.STRING_LITERAL);
        put("BackTick", VOID_MAPPING);
        put("WhiteSpaces", VOID_MAPPING);
        put("LineTerminator", VOID_MAPPING);
        put("HtmlComment", VOID_MAPPING);
        put("CDataComment", VOID_MAPPING);
        put("UnexpectedCharacter", VOID_MAPPING);
        put("TemplateStringEscapeAtom", VOID_MAPPING);
        put("TemplateStringStartExpression", VOID_MAPPING);
        put("TemplateStringAtom", VOID_MAPPING);
        put("EOF", VOID_MAPPING);
    }});

    private TypeScriptLanguageMapper(final Map<String, MetaNode> mappings) {
        super(mappings);
    }
}
