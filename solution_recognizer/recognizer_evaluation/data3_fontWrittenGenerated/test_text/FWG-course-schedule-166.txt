class Solution {

    public boolean canFinish(int N, int[][] arr) {
        ArrayList<Integer>[] adj = new ArrayList[N];
        for (int i = 0; i < N; i++) {
            adj[i] = new ArrayList<>();
        }
        for (int[] it : arr) {
            int u = it[0];
            int v = it[1];
            adj[v].add(u);
        }
        ArrayList<Integer> topo = new ArrayList<>();
        kahn(adj, topo, N);
        if (topo.size() < N)
            return false;
        return true;
    }

    public void kahn(List<Integer>[] adj, ArrayList<Integer> topo, int n) {
        int[] in = new int[n];
        for (int i = 0; i < n; i++) {
            for (int it : adj[i]) {
                in[it]++;
            }
        }
        Queue<Integer> q = new LinkedList<>();
        for (int i = 0; i < n; i++) {
            if (in[i] == 0)
                q.add(i);
        }
        int i = 0;
        while (!q.isEmpty()) {
            int node = q.peek();
            q.remove();
            topo.add(node);
            for (int it : adj[node]) {
                in[it]--;
                if (in[it] == 0)
                    q.add(it);
            }
        }
    }
}
