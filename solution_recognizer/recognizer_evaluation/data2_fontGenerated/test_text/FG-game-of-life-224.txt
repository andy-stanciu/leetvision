class Solution {

    public void gameOfLife(int[][] board) {
        int[][] res = new int[board.length][board[0].length];
        for (int i = 0; i < board.length; i++) {
            for (int j = 0; j < board[0].length; j++) {
                res[i][j] = board[i][j];
            }
        }
        for (int i = 0; i < board.length; i++) {
            for (int j = 0; j < board[0].length; j++) {
                int numberAliveNeighbors = countNeighbors(board, i, j);
                if (board[i][j] == 0 && numberAliveNeighbors == 3)
                    res[i][j] = 1;
                else if (board[i][j] == 1 && (numberAliveNeighbors < 2 || numberAliveNeighbors > 3))
                    res[i][j] = 0;
            }
        }
        for (int i = 0; i < board.length; i++) {
            for (int j = 0; j < board[0].length; j++) {
                board[i][j] = res[i][j];
            }
        }
    }

    public int countNeighbors(int[][] board, int i, int j) {
        int numberAliveNeighbors = 0;
        if (i - 1 >= 0 && j - 1 >= 0 && board[i - 1][j - 1] == 1)
            numberAliveNeighbors++;
        if (i - 1 >= 0 && board[i - 1][j] == 1)
            numberAliveNeighbors++;
        if (j - 1 >= 0 && board[i][j - 1] == 1)
            numberAliveNeighbors++;
        if (i - 1 >= 0 && j + 1 < board[0].length && board[i - 1][j + 1] == 1)
            numberAliveNeighbors++;
        if (j + 1 < board[0].length && board[i][j + 1] == 1)
            numberAliveNeighbors++;
        if (i + 1 < board.length && j + 1 < board[0].length && board[i + 1][j + 1] == 1)
            numberAliveNeighbors++;
        if (i + 1 < board.length && board[i + 1][j] == 1)
            numberAliveNeighbors++;
        if (i + 1 < board.length && j - 1 >= 0 && board[i + 1][j - 1] == 1)
            numberAliveNeighbors++;
        return numberAliveNeighbors;
    }
}
