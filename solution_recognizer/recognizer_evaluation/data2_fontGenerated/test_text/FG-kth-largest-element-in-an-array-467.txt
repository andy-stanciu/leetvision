class Solution {

    public int method1(int[] nums, int k) {
        MaxHeap heap = new MaxHeap(nums.length);
        for (int n : nums) heap.add(n);
        while (--k > 0) {
            heap.poll();
        }
        return heap.peek();
    }
}

class MaxHeap {

    private int[] arr;

    private final int capacity;

    private int size;

    public MaxHeap() {
        capacity = 100;
        size = 0;
        arr = new int[capacity];
    }

    public MaxHeap(int _capacity) {
        capacity = _capacity;
        size = 0;
        arr = new int[capacity];
    }

    private boolean hasParent(int ci) {
        return ((ci - 1) / 2) >= 0;
    }

    private boolean hasLeftChild(int i) {
        return (2 * i) + 1 < size;
    }

    private boolean hasRightChild(int i) {
        return (2 * i) + 2 < size;
    }

    private int method2(int ci) {
        return (ci - 1) / 2;
    }

    private int method3(int i) {
        return (2 * i) + 1;
    }

    private int method4(int i) {
        return (2 * i) + 2;
    }

    private int getParent(int ci) {
        return arr[method2(ci)];
    }

    private int getLeftChild(int i) {
        return arr[method3(i)];
    }

    private int getRightChild(int i) {
        return arr[method4(i)];
    }

    private void swap(int[] arr, int i, int j) {
        int tmp = arr[i];
        arr[i] = arr[j];
        arr[j] = tmp;
    }

    private void heapifyUp(int i) {
        while (hasParent(i) && getParent(i) < arr[i]) {
            swap(arr, method2(i), i);
            i = method2(i);
        }
    }

    private void heapifyDown(int i) {
        while (hasLeftChild(i)) {
            int greaterChildIdx = method3(i);
            // check if it has right child as well
            if (hasRightChild(i) && getRightChild(i) > arr[greaterChildIdx]) {
                greaterChildIdx = method4(i);
            }
            if (arr[i] > arr[greaterChildIdx])
                break;
            swap(arr, i, greaterChildIdx);
            i = greaterChildIdx;
        }
    }

    public void add(int x) {
        if (size == capacity) {
            System.out.println("Stack overflow: Heap has hit capacity.");
            return;
        }
        arr[size] = x;
        heapifyUp(size);
        size++;
    }

    public int poll() {
        if (size == 0) {
            System.out.println("Cannot perform poll: Heap is empty");
            return -1;
        }
        int top = arr[0];
        swap(arr, 0, --size);
        heapifyDown(0);
        return top;
    }

    public int peek() {
        if (size == 0) {
            System.out.println("Cannot perform peek: Heap is empty");
            return -1;
        }
        return arr[0];
    }

    public boolean isEmpty() {
        return size == 0;
    }
}
