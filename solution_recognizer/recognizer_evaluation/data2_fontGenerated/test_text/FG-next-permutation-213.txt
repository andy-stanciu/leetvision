class Solution {

    public void method1(int[] nums) {
        //find out the breaking point from where graph is decreasing
        int n = nums.length;
        //store index of breaking point
        int index = -1;
        // Step 1: Find the break point:
        //we need to find the longest matching substring hence we start from the back (english dictionary logic)
        for (// because 1 element makes no difference
        // because 1 element makes no difference
        int i = n - 2; // because 1 element makes no difference
        i >= 0; i--) {
            if (//note backward traversal
            nums[i] < nums[i + 1]) {
                index = i;
                break;
            }
        }
        if (// in case no breakpoint means its a decesding order sorted array so just reverse
        index == -1) {
            reverse(nums, 0, n - 1);
            return;
        }
        // Step 2: Find the next greater element
        //         and swap it with arr[ind]:
        //now find the nearest greater value from the half part of array
        for (int i = n - 1; i > index; i--) {
            if (nums[i] > nums[index]) {
                swap(nums, i, index);
                break;
            }
        }
        // last part sort the half of array in accending order because we want the minimum number just next greater
        // Step 3: reverse the right half:
        reverse(nums, index + 1, n - 1);
    }

    // Helper method to swap elements
    private void swap(int[] nums, int i, int j) {
        int temp = nums[i];
        nums[i] = nums[j];
        nums[j] = temp;
    }

    // Helper method to reverse a portion of the array
    private void reverse(int[] nums, int start, int end) {
        while (start < end) {
            swap(nums, start, end);
            start++;
            end--;
        }
    }
}
