class Solution {

    public List<List<Integer>> threeSum(int[] nums) {
        // Optimal approach
        List<List<Integer>> st = new ArrayList<>();
        // Sort the array so we can use two-pointer approach without a set
        Arrays.sort(nums);
        for (int i = 0; i < nums.length - 2; i++) {
            // Skip duplicates for the first element
            if (i > 0 && nums[i] == nums[i - 1]) {
                continue;
            }
            // Start just after i
            int j = i + 1;
            // Last element
            int k = nums.length - 1;
            while (j < k) {
                int sum = nums[i] + nums[j] + nums[k];
                if (sum > 0) {
                    // Decrease k to reduce the sum
                    k--;
                } else if (sum < 0) {
                    // Increase j to increase the sum
                    j++;
                } else {
                    // Found a triplet
                    st.add(Arrays.asList(nums[i], nums[j], nums[k]));
                    j++;
                    k--;
                    // Skip duplicates for the second element
                    while (j < k && nums[j] == nums[j - 1]) {
                        j++;
                    }
                    // Skip duplicates for the third element
                    while (j < k && nums[k] == nums[k + 1]) {
                        k--;
                    }
                }
            }
        }
        return st;
    }
}
