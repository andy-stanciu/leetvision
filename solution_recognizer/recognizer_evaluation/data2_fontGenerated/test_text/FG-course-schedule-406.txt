class Solution {

    public boolean dfs(List<List<Integer>> adj, int[] visited, int[] path, int x) {
        visited[x] = 1;
        path[x] = 1;
        for (int i = 0; i < adj.get(x).size(); i++) {
            int a = adj.get(x).get(i);
            if (visited[a] == 0) {
                if (dfs(adj, visited, path, a) == true) {
                    return true;
                }
            } else if (path[a] == 1) {
                return true;
            }
        }
        path[x] = 0;
        return false;
    }

    public boolean canFinish(int param1, int[][] prerequisites) {
        int[] visited = new int[param1];
        int[] pathVis = new int[param1];
        Arrays.fill(visited, 0);
        Arrays.fill(pathVis, 0);
        List<List<Integer>> adj = new ArrayList<>();
        for (int x = 0; x < param1; x++) {
            List<Integer> temp = new ArrayList<>();
            adj.add(temp);
        }
        int rows = prerequisites.length;
        for (int i = 0; i < rows; i++) {
            adj.get(prerequisites[i][1]).add(prerequisites[i][0]);
        }
        for (int j = 0; j < param1; j++) {
            if (visited[j] == 0) {
                if (dfs(adj, visited, pathVis, j) == true) {
                    return false;
                }
            }
        }
        return true;
    }
}
