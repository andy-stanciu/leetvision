class Solution {

    public int uniquePathsWithObstaclesHelper(int[][] obstacleGrid, int m, int n, int i, int j, int[][] visited, int[][] dp) {
        if (i < 0 || j < 0 || i >= m || j >= n || obstacleGrid[i][j] == 1 || visited[i][j] == 1) {
            return 0;
        }
        if (dp[i][j] != -1)
            return dp[i][j];
        if (i == m - 1 && j == n - 1) {
            return 1;
        }
        visited[i][j] = 1;
        //down path
        int op1 = uniquePathsWithObstaclesHelper(obstacleGrid, m, n, i + 1, j, visited, dp);
        //right path
        int op2 = uniquePathsWithObstaclesHelper(obstacleGrid, m, n, i, j + 1, visited, dp);
        dp[i][j] = op1 + op2;
        visited[i][j] = 0;
        return dp[i][j];
    }

    public int uniquePathsWithObstacles(int[][] obstacleGrid) {
        int m = obstacleGrid.length;
        int n = obstacleGrid[0].length;
        int[][] dp = new int[m][n];
        for (int[] arr : dp) {
            Arrays.fill(arr, -1);
        }
        int[][] visited = new int[m][n];
        return uniquePathsWithObstaclesHelper(obstacleGrid, m, n, 0, 0, visited, dp);
    }
}
