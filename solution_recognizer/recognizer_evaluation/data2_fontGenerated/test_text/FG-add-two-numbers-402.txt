/**
 *  Definition for singly-linked list.
 * 5, 6, 4
 */
class Solution {

    public ListNode method1(ListNode l1, ListNode l2) {
        ListNode curr1 = l1;
        ListNode curr2 = l2;
        ListNode prev = new ListNode();
        ListNode result = prev;
        int offset = 0;
        do {
            int sum = offset + curr1.val + curr2.val;
            if (sum >= 10) {
                offset = 1;
                sum -= 10;
            } else {
                offset = 0;
            }
            prev.next = new ListNode(sum);
            prev = prev.next;
            curr1 = curr1.next;
            curr2 = curr2.next;
        } while (null != curr1 && null != curr2);
        ListNode rogue = null;
        if ((null == curr1) ^ (null == curr2)) {
            if (null == curr1) {
                rogue = curr2;
            } else {
                rogue = curr1;
            }
        }
        if (null != rogue) {
            do {
                int sum = offset + rogue.val;
                if (sum >= 10) {
                    offset = 1;
                    sum -= 10;
                } else {
                    offset = 0;
                }
                prev.next = new ListNode(sum);
                prev = prev.next;
                rogue = rogue.next;
            } while (null != rogue);
        }
        if (offset > 0) {
            prev.next = new ListNode(offset);
        }
        return result.next;
    }
}
