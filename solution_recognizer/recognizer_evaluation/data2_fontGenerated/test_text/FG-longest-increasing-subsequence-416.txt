class Solution {

    public int lengthOfLIS(int[] nums) {
        int res = 1;
        int[] dp = new int[nums.length];
        for (int i = 0; i < dp.length; i++) {
            dp[i] = 1;
        }
        for (int i = 1; i < nums.length; i++) {
            for (int j = 0; j < i; j++) {
                if (nums[i] > nums[j])
                    dp[i] = Math.max(dp[i], dp[j] + 1);
            }
            res = Math.max(res, dp[i]);
        }
        return res;
    }
}

class Solution {

    public int lengthOfLIS(int[] nums) {
        List<Integer> list = new ArrayList<>();
        int index = 0;
        for (int i = 0; i < nums.length; i++) {
            index = findNumIndex(list, nums[i]);
            if (index == list.size())
                list.add(nums[i]);
            else
                list.set(index, nums[i]);
        }
        return list.size();
    }

    private int findNumIndex(List<Integer> list, int target) {
        int l = 0;
        int r = list.size();
        int m = 0;
        int res = list.size();
        while (l < r) {
            m = l + (r - l) / 2;
            if (list.get(m) < target) {
                l = m + 1;
            } else {
                res = m;
                r = m;
            }
        }
        return res;
    }
}
