package org.leetvision.parser.meta;

public final class MetaLanguage {
    private MetaLanguage() {
    }

    public enum MetaNode {
        PROGRAM,
        IMPORT,

        TYPE_DECLARATION,
        CLASS_MODIFIER,
        VARIABLE_MODIFIER,
        CLASS_DECLARATION,
        MEMBER_DECLARATION_LIST,
        MEMBER_DECLARATION,
        TYPE_PARAMETERS,
        TYPE_PARAMETER,

        ENUM_DECLARATION,
        ENUM_CONSTANTS,
        ENUM_CONSTANT,
        ENUM_BODY_DECLARATIONS,

        INTERFACE_DECLARATION,
        CLASS_BODY,
        INTERFACE_BODY,
        BODY_DECLARATION,
        DECLARATION_LIST,
        METHOD_DECLARATION,
        EXCEPTION_DECLARATION,
        METHOD_BODY,

        TYPE,
        CLASS_OR_INTERFACE_TYPE,
        TYPE_ARGUMENTS,

        QUALIFIED_NAME,
        FORMAL_PARAMETERS,
        FORMAL_PARAMETER,
        LAMBDA_PARAMETERS,

        CONSTRUCTOR_DECLARATION,
        FIELD_DECLARATION,
        CONST_DECLARATION,
        CONSTANT_DECLARATOR,

        VARIABLE_DECLARATORS,
        VARIABLE_DECLARATOR,
        ARRAY_INITIALIZER,
        INITIALIZER,
        INITIALIZER_LIST,

        DEFAULT_VALUE,
        RECORD_DECLARATION,
        RECORD_COMPONENT_LIST,
        RECORD_COMPONENT,
        RECORD_BODY,

        BLOCK,
        LOCAL_VARIABLE_DECLARATION,
        IDENTIFIER,
        STATEMENT,

        CATCH_CLAUSE,
        CATCH_TYPE,
        FINALLY_BLOCK,

        SWITCH_BLOCK_STATEMENT_GROUP,
        SWITCH_LABEL,
        FOR_CONTROL,
        FOREACH_CONTROL,
        EXPRESSION_LIST,
        METHOD_CALL,
        EXPRESSION,
        PATTERN,
        LAMBDA_EXPRESSION,
        SWITCH_EXPRESSION,
        SWITCH_LABELED_RULE,
        SWITCH_RULE_OUTCOME,

        CREATOR,
        DESTRUCTOR,
        CREATED_NAME,
        ARRAY_CREATOR_REST,
        CLASS_CREATOR_REST,
        FREE,

        EXPLICIT_GENERIC_INVOCATION,
        TYPE_LIST,
        EXPLICIT_GENERIC_INVOCATION_SUFFIX,
        ARGUMENTS,

        // terminals

        DECIMAL_LITERAL,
        HEX_LITERAL,
        OCT_LITERAL,
        BINARY_LITERAL,
        FLOAT_LITERAL,
        HEX_FLOAT_LITERAL,
        BOOL_LITERAL,
        CHAR_LITERAL,
        STRING_LITERAL,
        POINTER_LITERAL,
        USER_DEFINED_LITERAL,
        MULTILINE_STRING_LITERAL,
        NULL_LITERAL,

        DIRECTIVE,

        MODIFIER_ABSTRACT,
        MODIFIER_CONST,
        MODIFIER_EXTENDS,
        MODIFIER_IMPLEMENTS,
        MODIFIER_FINAL,
        MODIFIER_PRIVATE,
        MODIFIER_PROTECTED,
        MODIFIER_PUBLIC,
        MODIFIER_STATIC,
        MODIFIER_STRICTFP,  // ?
        MODIFIER_SYNCHRONIZED,
        MODIFIER_THROWS,
        MODIFIER_SEALED,
        MODIFIER_VARARGS,  // ...
        MODIFIER_LIST,
        MODIFIER_OVERRIDE,
        MODIFIER_MUTABLE,

        STATEMENT_ASSERT,
        STATEMENT_BREAK,
        STATEMENT_CONTINUE,
        STATEMENT_SWITCH,
        STATEMENT_CASE,
        STATEMENT_DEFAULT,
        STATEMENT_TRY,
        STATEMENT_CATCH,
        STATEMENT_DO,
        STATEMENT_ELSE,
        STATEMENT_FINALLY,
        STATEMENT_FOR,
        STATEMENT_IF,
        STATEMENT_GOTO,
        STATEMENT_RETURN,
        STATEMENT_THROW,
        STATEMENT_WHILE,
        STATEMENT_YIELD,
        STATEMENT_MATCH,

        EXPR_INSTANCEOF,
        EXPR_NEW,
        EXPR_SUPER,
        EXPR_THIS,

        OP_ASSIGN,
        OP_ADD_ASSIGN,
        OP_SUB_ASSIGN,
        OP_MUL_ASSIGN,
        OP_DIV_ASSIGN,
        OP_AND_ASSIGN,
        OP_OR_ASSIGN,
        OP_XOR_ASSIGN,
        OP_MOD_ASSIGN,
        OP_LSHIFT_ASSIGN,
        OP_RSHIFT_ASSIGN,
        OP_URSHIFT_ASSIGN,
        OP_GT,
        OP_LT,
        OP_NOT,
        OP_BITNOT,
        OP_TERNARY,
        OP_EQUAL,
        OP_LE,
        OP_GE,
        OP_NOTEQUAL,
        OP_AND,
        OP_OR,
        OP_XOR,
        OP_INC,
        OP_DEC,
        OP_ADD,
        OP_SUB,
        OP_MUL,
        OP_DIV,
        OP_MOD,
        OP_BITAND,
        OP_BITOR,
        OP_LAMBDA,
        OP_METHOD_REFERENCE,  // ::
        OP_POINTER_DEREF,
        OP_DEREF_ACCESS,
        OP_POINTER_ADDR,
        OP_SIZEOF,
        OP_SLICE,
        OP_IN,
        OP_POWER,
        OP_LSHIFT,
        OP_RSHIFT,

        TYPE_BOOLEAN,
        TYPE_BYTE,
        TYPE_CHAR,
        TYPE_CLASS,
        TYPE_INTERFACE,
        TYPE_DOUBLE,
        TYPE_ENUM,
        TYPE_FLOAT,
        TYPE_INT,
        TYPE_LONG,
        TYPE_SHORT,
        TYPE_VOID,
        TYPE_VAR,
        TYPE_RECORD,
        TYPE_OF,
        TYPE_SIGNED,
        TYPE_UNSIGNED,
        TYPE_STRUCT,
        TYPEDEF,

        CAST,

        // hacks - concrete but similar enough between all languages
        L_SQUARE,
        R_SQUARE,
        DOT,
    }
}
